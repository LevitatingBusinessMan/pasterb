ruby:
  require 'cgi'
  $cgi = CGI.new
  puts $cgi.http_header "text/html"

  $errors = []

  require './src/data.rb'
  require './src/log.rb'
  require './src/ace.rb'

  key = $cgi['']

  $writable = true

  begin
  $paste = case $cgi.path_info
  when "/view"
      $writable = false
    Paste.find_by! read_key: key
  when "/edit"
    Paste.find_by! write_key: key
  when "/"
    Paste.new
  else 
    raise "Unknown #{$cgi.path_info}"
  end

  rescue Exception => ex
    $errors << ex
    if $paste.nil?
      $paste = Paste.new
      $writable = true
    end
  end

  begin
    $rev = $cgi.has_key?("rev") ? $cgi["rev"] : nil
    $content = $paste.content $rev
  rescue Exception => ex 
    $errors << ex
    $rev = nil
    $content = $paste.content
  end

  if $cgi.request_method == "POST" && $writable
    begin
      if $cgi.form.has_key? "content"
        raise "Paste cannot be empty" if $cgi.form["content"].first.empty?
        raise "No change with last revision" if $cgi.form["content"].first == $paste.content
        $paste.save! unless $paste.persisted? and not $paste.changed?
        $paste.revisions.create!(content: $cgi.form["content"].first, name: $cgi.form["name"].first.empty? ? nil : $cgi.form["name"].first)
        $content = $paste.content
      end
      if $cgi.form.has_key? "title"
        $paste.update! title: $cgi.form["title"].first
      end
      if $cgi.form.has_key? "syntax"
        $paste.update! syntax: $cgi.form["syntax"].first
      end
    rescue Exception => ex
      $errors << ex
    end
  end

  @action_path = $paste.new_record? ? "/" : $paste.edit_link

doctype html
html
head
  title PasteRB
body
  #title_area
    h1#title[title="Click to copy read link" onclick="navigator.clipboard.writeText('#{$paste.view_link}')"]= $paste.title
    - if $rev
      span#rev= "Showing revision #{$rev}"
      a#latest[href=($writable ? $paste.edit_link : $paste.view_link)] go to latest
    - if $paste.new_record?
      span#unsaved unsaved
    a#new_paste[href="/"]: h1 New paste
  #flex
    #left
      #editor= $content
    #right
      - for e in $errors
        p#error=e
      - if $writable
        form[action=(@action_path) method="post"]
          label Edit paste title:  
          input[value=$paste.title name="title"]
          button save
        form[action=(@action_path) method="post"]
          label Syntax:
          select[name="syntax"]
            - for m in ACE.modes 
              option[value=m selected=(m == $paste.syntax)]= m
          button save
        hr
        form[action=(@action_path) method="post"]
          label Commit message:
          br
          textarea[placeholder="Revision #{$paste.revisions.length + 1}" name="name"]
          input#content_input[type="hidden" name="content"]
          br
          button.like_link: h1[title="Save current text"] COMMIT
        - unless $paste.new_record?
          a.pad[href=$paste.view_link] view link
          - if $writable 
            span#edit_link: a[href=$paste.edit_link] edit link
        - else
          p Please save this paste in order to share it
      h1#rev_history Revision history
      - for rev in $paste.revisions.order(revision_id: :desc)
        span
          | (#{rev.revision_id})  
          a[href=($writable ? rev.edit_link : rev.view_link) title=rev.title_info]= rev.name
        br
      br
      details
        summary: h1.inline What is this?
        p PasteRB is a service similar to many other platforms for saving gists or pastes. <br>
          It allows you to save a piece of text and create a shareable link. <br>
          PasteRB let's you then update your text with new "revisions". <br>
          <br>
          PasteRB makes use of two links to share pastes with.<br>
          The view link can be used to view a paste.<br>
          The edit link gives anyone the power to edit a paste<br>
      p#dragme &#x1F448;drag me

script src=ACE::ENTRY
javascript:
    // Ensure that the uri always points to the paste (in case the keys were just generated)
    if (window.history.replaceState) window.history.replaceState({}, "", "#{$writable ? $paste.edit_link : $paste.view_link}")

  var editor = ace.edit("editor");
  editor.setTheme("ace/theme/monokai");
  editor.setOptions({
    wrap: true,
    fontSize: 20,
    readOnly: #{!$writable},
    mode: "ace/mode/#{$paste.syntax || "text"}"
  });
  editor.session.on('change', on_change);
  on_change()

  function on_change(delta) {
    document.getElementById('content_input').value = editor.getValue()
  }

  function clipboard(selector) {
    document.querySelector(selector)
  }

css:
  #title_area *, .pad {
    padding-right: 5px;
  }
  
  #title_area * {
    display: inline-block;
  }
  
  p#error {
    color: crimson;
    margin: 0;
  }

  body {
    display: flex;
    flex-direction: column;
  }
  
  #flex {
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
  }

  #left {
    resize: horizontal;
    overflow: auto;
    width: 75%;
  }

  #right {
    resize: horizontal;
    margin-left: 10px;
    word-wrap: break-word;
  }

  #left, #right {
    height: 100%;
    max-width: 100%;
    display: inline-block;
    vertical-align: middle;
  }

  html, body, #editor {
    height: 100%;
    padding: 0;
    margin: 0;
  }

  body {
    background-color: FloralWhite;
  }

  p#dragme {
    position: absolute;
    bottom: 0;
    padding: 0;
    margin: 0;
  }

  #new_paste {
    float: right;
    margin-right: 20px;
  }

  a {
    color: SteelBlue;
  }

  .like_link {
    background: none;
     border: none;
     color: SteelBlue;
     text-decoration: underline;
     cursor: pointer; 
  }

  h1#title {
    cursor: pointer;
  }

  .inline {
    display: inline;
  }

  h1#rev_history {
    margin-top: 0;
  }
